name: AutoTag/Publishing
on:
  push:
    branches:
      - main

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install pipenv
        run: python3 -m pip install poetry
      - name: Lance les tests
        run: |
          poetry install
          poetry run pytest tests/*

  auto-tag:
    needs: testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get last tag
        id: get_last_tag
        run: echo tag=$(git describe --abbrev=0 --tags --always --first-parent HEAD) >> $GITHUB_OUTPUT
      - name: Get commit message
        id: get_commit_message
        run: echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
      - name: Auto-tag
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          LAST_TAG: ${{ steps.get_last_tag.outputs.tag }}
          MESSAGE: ${{ steps.get_commit_message.outputs.message }}
        run: |
          git config user.name autotag
          git config user.email autotag@github.com
          TAG_PARTS=(${LAST_TAG//./ })
          if [[ $MESSAGE == *'!'* ]]; then
            NEW_TAG=$((${TAG_PARTS[0]}+1)).0.0
          elif [[ $MESSAGE == *'feat'* ]]; then
            NEW_TAG=${TAG_PARTS[0]}.$((${TAG_PARTS[1]}+1)).0
          elif [[ $MESSAGE == *'fix'* ]]; then
            NEW_TAG=${TAG_PARTS[0]}.${TAG_PARTS[1]}.$((${TAG_PARTS[2]}+1))
          else
            echo "Nothing to tag"
            exit 0
          fi
          git tag -a $NEW_TAG -m "$MESSAGE"
          git push origin $NEW_TAG

  publish:
    needs: [testing, auto-tag]
    if: ${{ always() || startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
    steps:
      - name: Cloner le dépôt Git
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Installer les dépendances
        run: |
          pip install poetry
      - name: Changement du tag$(git describe --tags)
        run: |
          TAG=$(git describe --abbrev=0 --tags --always --first-parent HEAD)
          poetry version $TAG
      - name: Build and Publish
        run: |
          poetry build
          poetry publish -u $USERNAME -p $PASSWORD
